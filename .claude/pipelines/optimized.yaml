# Optimized multi-agent pipeline with conditional execution and parallel processing
version: 1
name: optimized-code-pipeline
description: "Context-aware pipeline that adapts execution based on change scope"

stages:
  # Phase 1: Coordination and Analysis
  - id: coordination
    agent: coordinator
    inputs:
      required: [goal, scope, related_docs]
      optional: [constraints, files_changed]
    outputs: [assignments, qc_plan, tech_stack_analysis, execution_plan]
    conditions:
      always: true

  # Phase 2: Architecture Review (conditional)
  - id: architecture
    agent: architect
    inputs:
      required: [goal, scope, related_docs]
      from_stage: coordination
      map:
        assignments: assignments
        tech_stack_analysis: tech_stack_analysis
    outputs: [arch_notes, risks, references, design_decisions]
    conditions:
      when:
        - has_new_models: true
        - has_migrations: true
        - has_new_routes: true
        - scope_includes: ["architecture", "database", "api"]

  # Phase 3: Code Authoring
  - id: authoring
    agent: code-author
    inputs:
      required: [goal, scope, related_docs]
      optional: [constraints, files_changed]
      from_stage: [coordination, architecture]
      map:
        arch_notes: arch_notes
        assignments: assignments
        execution_plan: execution_plan
    outputs: [patch, summary, checklist, file_manifest]
    conditions:
      always: true

  # Phase 4: Parallel Technical Reviews (conditional execution)
  - id: backend_reviews
    parallel: true
    stages:
      - id: laravel_review
        agent: laravel-expert
        inputs:
          from_stage: authoring
          map:
            patch: patch
            file_manifest: file_manifest
        outputs: [laravel_review]
        conditions:
          when_files_match: ["*.php", "composer.json", "artisan", "config/**"]

      - id: database_review
        agent: database-expert
        inputs:
          from_stage: authoring
          map:
            patch: patch
            file_manifest: file_manifest
        outputs: [db_review]
        conditions:
          when_files_match: ["database/**", "*migration*", "*seeder*", "*factory*"]

  - id: admin_reviews
    parallel: true
    depends_on: [backend_reviews]
    stages:
      - id: filament_review
        agent: filament-expert
        inputs:
          from_stage: authoring
          map:
            patch: patch
            file_manifest: file_manifest
        outputs: [filament_review]
        conditions:
          when_files_match: ["**/Filament/**", "**/Resources/**", "**/Pages/**", "**/Widgets/**"]

      - id: nova_review
        agent: nova-expert
        inputs:
          from_stage: authoring
          map:
            patch: patch
            file_manifest: file_manifest
        outputs: [nova_review]
        conditions:
          when_files_match: ["**/Nova/**", "nova.php", "**/Metrics/**", "**/Lenses/**"]

  - id: frontend_reviews
    parallel: true
    depends_on: [backend_reviews]
    stages:
      - id: react_review
        agent: react-expert
        inputs:
          from_stage: authoring
          map:
            patch: patch
            file_manifest: file_manifest
        outputs: [react_review]
        conditions:
          when_files_match: ["*.jsx", "*.tsx", "*.js", "*.ts", "package.json", "vite.config.*"]

      - id: tailwind_review
        agent: tailwind-expert
        inputs:
          from_stage: authoring
          map:
            patch: patch
            file_manifest: file_manifest
        outputs: [tailwind_review]
        conditions:
          when_files_match: ["*.css", "tailwind.config.*", "postcss.config.*"]
          or_content_includes: ["@apply", "tailwind", "class=", "className="]

      - id: livewire_review
        agent: livewire-expert
        inputs:
          from_stage: authoring
          map:
            patch: patch
            file_manifest: file_manifest
        outputs: [livewire_review]
        conditions:
          when_files_match: ["**/Livewire/**", "**/Components/**"]
          or_content_includes: ["#[LivewireComponent]", "Livewire\\Component"]

  # Phase 5: Cross-functional Reviews
  - id: cross_functional_reviews
    parallel: true
    depends_on: [backend_reviews, admin_reviews, frontend_reviews]
    stages:
      - id: ux_review
        agent: ux-expert
        inputs:
          from_stage: authoring
          map:
            patch: patch
            summary: summary
            file_manifest: file_manifest
        outputs: [ux_report]
        conditions:
          when_files_match: ["*.blade.php", "*.jsx", "*.tsx", "*.vue"]
          or_scope_includes: ["ui", "ux", "frontend", "design"]

      - id: docs_review
        agent: docs-reviewer
        inputs:
          from_stage: [architecture, authoring]
          map:
            arch_notes: arch_notes
            summary: summary
            file_manifest: file_manifest
        outputs: [docs_report]
        conditions:
          when_files_match: ["docs/**", "*.md", "README*"]
          or_always_if: "mandatory_docs_first"

  # Phase 6: Project Management Review
  - id: pm_review
    agent: pm
    inputs:
      from_stage: [coordination, architecture, authoring]
      map:
        arch_notes: arch_notes
        summary: summary
        qc_plan: qc_plan
        execution_plan: execution_plan
    outputs: [pm_report, timeline_impact, risk_assessment]
    conditions:
      when_scope_includes: ["milestone", "feature", "architecture"]
      or_file_count_exceeds: 10

  # Phase 7: Final Review and Integration
  - id: final_review
    agent: code-reviewer
    inputs:
      from_stage: [coordination, authoring, backend_reviews, admin_reviews, frontend_reviews, cross_functional_reviews, pm_review]
      map:
        patch: patch
        checklist: checklist
        qc_plan: qc_plan
        all_reviews: "*_review"
    outputs: [consolidated_review, decision, actions, quality_score]
    conditions:
      always: true

  # Phase 8: GitHub Operations (conditional)
  - id: github_ops
    agent: github-expert
    inputs:
      from_stage: final_review
      map:
        decision: decision
        actions: actions
        consolidated_review: consolidated_review
        quality_score: quality_score
    outputs: [branch, commits, pr_link, issue_links, deployment_notes]
    conditions:
      when_decision: ["approve", "approve_with_conditions"]

# Pipeline Configuration
policy:
  merge_strategy: pr
  branch_naming:
    feature: "feature/{short}"
    chore: "chore/{short}"
    fix: "fix/{short}"
    docs: "docs/{short}"
  mandatory_rules:
    - require_docs_first: true
    - require_pint: true
    - require_larastan: true
    - enforce_naming_consistency: true
    - minimum_quality_score: 7.0
  parallel_execution:
    max_concurrent_stages: 3
    timeout_per_stage: 300  # 5 minutes
    fallback_on_timeout: "continue_with_warnings"

# Performance Optimization
optimization:
  caching:
    enabled: true
    cache_duration: "1h"
    cache_key_includes: [patch_hash, file_manifest]
  early_termination:
    enabled: true
    conditions:
      - critical_errors_found: true
      - quality_score_below: 5.0
  resource_management:
    memory_limit: "2GB"
    cpu_priority: "normal"

# Conditional Execution Rules
conditions:
  file_patterns:
    php_backend: ["*.php", "composer.json", "composer.lock", "artisan"]
    js_frontend: ["*.js", "*.jsx", "*.ts", "*.tsx", "package.json", "vite.config.*"]
    css_styles: ["*.css", "*.scss", "*.sass", "tailwind.config.*"]
    docs: ["docs/**", "*.md", "README*"]
    migrations: ["database/migrations/**"]
    tests: ["tests/**", "*test.php", "*.test.js"]

  scope_keywords:
    architecture: ["architecture", "design", "structure", "refactor"]
    database: ["database", "migration", "model", "schema"]
    frontend: ["frontend", "ui", "ux", "react", "component"]
    backend: ["backend", "api", "service", "controller"]
    admin: ["admin", "filament", "nova", "dashboard"]

# Error Handling
error_handling:
  retry_policy:
    max_retries: 3
    backoff_strategy: "exponential"
  fallback_agents:
    laravel-expert: ["code-reviewer"]
    react-expert: ["code-reviewer"]
    database-expert: ["architect"]

notes:
  - "This pipeline uses conditional execution to optimize performance"
  - "Parallel processing reduces overall execution time"
  - "Context-aware agent selection based on file changes and scope"
  - "Early termination prevents unnecessary processing on critical failures"
  - "Caching improves performance for similar change patterns"
  - "All 15 agents are properly mapped with appropriate conditions"